@namespace PopulationSimulator.Components

@using PopulationSimulator.Core
@using PopulationSimulator.Services
@using RazorConsole.Components
@using Spectre.Console
@using Microsoft.AspNetCore.Components

@inject SimulatorService SimulatorService

@implements IDisposable

<Rows>
    <Panel Title="ADVANCED POPULATION SIMULATOR - Living World" 
           BorderColor="@Color.Cyan1" 
           Border="BoxBorder.Double"
           Expand="true">
        <Columns>
            <Markup Content="@($"Current Date: Year {_stats.CurrentDate.Year}, Day {_stats.CurrentDate.DayOfYear}")" 
                    Foreground="@Color.Yellow" />
            <Markup Content="@($"Generation: {_stats.GenerationNumber}")" 
                    Foreground="@Color.Yellow" />
            <Markup Content="@($"Speed: {_simulationSpeed}x")" 
                    Foreground="@Color.Yellow" />
        </Columns>
    </Panel>

    <PopulationStatsPanel Stats="@_stats" />

    @if (_stats.TopJobs.Any())
    {
        <TopJobsPanel TopJobs="@_stats.TopJobs" />
    }

    <CivilizationPanel Stats="@_stats" />

    <DetailListsPanel Stats="@_stats" />

    @if (_stats.FamilyTrees.Any())
    {
        <FamilyTreePanel FamilyTree="@_stats.FamilyTrees.First()" />
    }

    <RecentEventsPanel Events="@_stats.RecentEvents" />

    <Panel Title="RECENT BIRTHS/DEATHS/MARRIAGES" 
           BorderColor="@Color.Grey" 
           Border="BoxBorder.Rounded"
           Expand="true"
           Height="10">
        <Columns>
            <Rows Title="Births" BorderColor="@Color.Green">
                @{
                    var births = _stats.RecentEvents.Where(e => e.EventType == "Birth").TakeLast(3).ToList();
                    if (!births.Any())
                    {
                        <Markup Content="No recent births" Foreground="@Color.Grey" />
                    }
                    else
                    {
                        @foreach (var evt in births)
                        {
                            var text = evt.Description.Length > 35 ? evt.Description.Substring(0, 32) + "..." : evt.Description;
                            <Markup Content="@text" Foreground="@Color.Green" />
                        }
                    }
                }
            </Rows>
            <Rows Title="Deaths" BorderColor="@Color.Red">
                @{
                    var deaths = _stats.RecentEvents.Where(e => e.EventType == "Death").TakeLast(3).ToList();
                    if (!deaths.Any())
                    {
                        <Markup Content="No recent deaths" Foreground="@Color.Grey" />
                    }
                    else
                    {
                        @foreach (var evt in deaths)
                        {
                            var text = evt.Description.Length > 35 ? evt.Description.Substring(0, 32) + "..." : evt.Description;
                            <Markup Content="@text" Foreground="@Color.Red" />
                        }
                    }
                }
            </Rows>
            <Rows Title="Marriages" BorderColor="@Color.Yellow">
                @{
                    var marriages = _stats.RecentEvents.Where(e => e.EventType == "Marriage").TakeLast(3).ToList();
                    if (!marriages.Any())
                    {
                        <Markup Content="No recent marriages" Foreground="@Color.Grey" />
                    }
                    else
                    {
                        @foreach (var evt in marriages)
                        {
                            var text = evt.Description.Length > 35 ? evt.Description.Substring(0, 32) + "..." : evt.Description;
                            <Markup Content="@text" Foreground="@Color.Yellow" />
                        }
                    }
                }
            </Rows>
        </Columns>
    </Panel>

    <Panel Title="CONTROLS" 
           BorderColor="@Color.Grey" 
           Border="BoxBorder.Rounded"
           Expand="true">
        <Columns>
            <TextButton Content="[+] Speed Up" OnClick="@SimulatorService.IncreaseSpeed" BackgroundColor="@Color.Green" FocusedColor="@Color.Lime" />
            <TextButton Content="[-] Slow Down" OnClick="@SimulatorService.DecreaseSpeed" BackgroundColor="@Color.Yellow" FocusedColor="@Color.Orange1" />
            <Markup Content="Use Tab to switch focus, Enter to click, Ctrl+C to quit" 
                    Foreground="@Color.Grey" />
        </Columns>
    </Panel>
</Rows>

@code {
    private SimulationStats _stats = new();
    private int _simulationSpeed = 1;

    protected override void OnInitialized()
    {
        SimulatorService.OnStatsUpdated += HandleStatsUpdated;
        SimulatorService.OnSpeedChanged += HandleSpeedChanged;
        
        // Start the simulation
        SimulatorService.Start();
    }

    private void HandleStatsUpdated(SimulationStats stats)
    {
        _stats = stats;
        InvokeAsync(StateHasChanged);
    }

    private void HandleSpeedChanged(int speed)
    {
        _simulationSpeed = speed;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SimulatorService.OnStatsUpdated -= HandleStatsUpdated;
        SimulatorService.OnSpeedChanged -= HandleSpeedChanged;
        SimulatorService.Stop();
    }
}
